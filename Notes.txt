COMP62542 Assign 1 notes:

- Design and implement a simple Checkout System for online "grocer"
- Java

- Sells 3 types of product:
	- Milk (50p per pint): skimmed, semi-skimmed, whole milk
	- Bread (£1.5 per pack): Whole-wheat, sourdough, rye, pita
	- Fruit: apple (£2 per kilo), banana, orange
	
- Scenarios:
	- Check and display the price for each scanned product
	- Display price for each product from each presented shopping cart and show total price
	- Apply special offer to the products in a given shopping card.
		- buy one get one free,
		- buy three for the price of two
	- Simulate the payment process
		- 3 payment methods (Paypal, card payment, google pay)
			- each set requires different set of information to simulate real world situations
		- Display different states of payment: payment pending, payment accepted, payment rejected.
	
- AT LEAST 4 design patterns that you learned from week 1 to 4.
	- Design them yourself
	- Add more if they make design more flexible.
	- We CAN use Java Spring MVC!! MVC Does NOT count towards the four patterns
	
	
- Written report questions:
	1. Does pattern help to solve design problems?
		- does it warrant the use of the pattern in that it cannot be solved by a simpler solution?
	2. What is the relationship between this pattern and the patterns you have already applied to your design? Is the use of this pattern really necessary?
	3. Will this pattern help improve cohesion and coupling of the overall system?
		- How so?
	4. Will this pattern make your design easy to change?
		- Which aspect can be changed easily? Is it the design time change or the runtime change?
	5. Is your choice of this pattern guided by the design pattern principles?
		- Which of these principles is your main motivation for using the pattern?
			- Is it "program to an interface, not an implementation", "favour object composition over class inheritance" or "design for change"?
			
- Written report sections:
	1. Your name + email address
	2. Describe each pattern in your system by answering questions above.
	3. Show overal design using UML Class Diagrams
	4. Describe BRIEFLY the main classes in each pattern, how these classes interact and the main implementation techniques you feel most proud of.
	5. Describe how to ruyn system and how to execute each of the above mentioned scenarios.
	
- Submit report with source code (include a github repo? doesn't say but should do this I think)


----------------------------------------------------------
My notes:
----------------------------------------------------------

Patterns I could use:
- Mediator - Send an object to the command/Query
- Command - Command/Query for application services
- Publish-Subscribe - publish events for payment system and verification
- Factory
- Adapter
- Builder
- Observer??
- Singleton (for prices)
- Proxy??


Oracle email: michael.richards-2@postgrad.manchester.ac.uk
Oracle password: S39u#WZm8p$F+!M


-- What I have do far:
Mediator
Commands
Abstract Factory
Factory Method
Facade - Services
Singleton
Builder


	